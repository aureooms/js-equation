"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.__gaussjordan__ = __gaussjordan__;
function __gaussjordan__(iszero, zero, isub, mul, div, swap) {

	/**
  * A is a m * (n + 1) matrix.
  * Column n is the independent term column.
  *
  * @param  {matrix} A equations system
  * @param  {const length} m number of equations
  * @param  {const length} n number of variables
  */
	var gaussjordan = function gaussjordan(A, m, n) {

		var r, c, j, k, Ar, Aj, f, t, iterations, rank, pivot;

		// for each row r
		// zero column c for all other rows
		// the pivot used is A[r][c]

		// If at the end of the procedure a line is composed
		// of zeroes except for the independent term
		// then the system is not solvable. The index of such
		// a line is at least the rank of the matrix

		iterations = Math.min(m, n);

		r = 0;

		columns: for (c = 0; c < iterations; ++c) {

			Ar = A[r];
			pivot = Ar[c];

			// if we have a zero in A[r][c]
			// we need to swap row r with row
			// j such that A[j][c] is not zero
			// if this is not possible then we
			// decrease the rank of the matrix
			// and continue with the next
			// column

			if (iszero(pivot)) {

				j = r;

				do {

					++j;

					if (j === m) {
						continue columns;
					}
				} while (iszero(A[j][c]));

				swap(A, r, j);

				Ar = A[r];
				pivot = Ar[c];
			}

			for (j = 0; j < r; ++j) {

				Aj = A[j];

				f = div(Aj[c], pivot);

				Aj[c] = zero();

				for (k = c + 1; k <= n; ++k) {

					t = mul(f, Ar[k]);

					Aj[k] = isub(Aj[k], t);
				}
			}

			for (j = r + 1; j < m; ++j) {

				Aj = A[j];

				f = div(Aj[c], pivot);

				Aj[c] = zero();

				for (k = c + 1; k <= n; ++k) {

					t = mul(f, Ar[k]);

					Aj[k] = isub(Aj[k], t);
				}
			}

			++r;
		}

		return r;
	};

	return gaussjordan;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9nYXVzc2pvcmRhbi5qcyJdLCJuYW1lcyI6WyJfX2dhdXNzam9yZGFuX18iLCJpc3plcm8iLCJ6ZXJvIiwiaXN1YiIsIm11bCIsImRpdiIsInN3YXAiLCJnYXVzc2pvcmRhbiIsIkEiLCJtIiwibiIsInIiLCJjIiwiaiIsImsiLCJBciIsIkFqIiwiZiIsInQiLCJpdGVyYXRpb25zIiwicmFuayIsInBpdm90IiwiTWF0aCIsIm1pbiIsImNvbHVtbnMiXSwibWFwcGluZ3MiOiI7Ozs7O1FBQ2dCQSxlLEdBQUFBLGU7QUFBVCxTQUFTQSxlQUFULENBQTJCQyxNQUEzQixFQUFtQ0MsSUFBbkMsRUFBeUNDLElBQXpDLEVBQStDQyxHQUEvQyxFQUFvREMsR0FBcEQsRUFBeURDLElBQXpELEVBQWdFOztBQUd0RTs7Ozs7Ozs7QUFRQSxLQUFJQyxjQUFjLFNBQWRBLFdBQWMsQ0FBV0MsQ0FBWCxFQUFjQyxDQUFkLEVBQWlCQyxDQUFqQixFQUFxQjs7QUFFdEMsTUFBSUMsQ0FBSixFQUFPQyxDQUFQLEVBQVVDLENBQVYsRUFBYUMsQ0FBYixFQUFnQkMsRUFBaEIsRUFBb0JDLEVBQXBCLEVBQXdCQyxDQUF4QixFQUEyQkMsQ0FBM0IsRUFBOEJDLFVBQTlCLEVBQTBDQyxJQUExQyxFQUFnREMsS0FBaEQ7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBRixlQUFhRyxLQUFLQyxHQUFMLENBQVVkLENBQVYsRUFBYUMsQ0FBYixDQUFiOztBQUVBQyxNQUFJLENBQUo7O0FBRUFhLFdBQVUsS0FBTVosSUFBSSxDQUFWLEVBQWNBLElBQUlPLFVBQWxCLEVBQStCLEVBQUVQLENBQWpDLEVBQXFDOztBQUU5Q0csUUFBS1AsRUFBRUcsQ0FBRixDQUFMO0FBQ0FVLFdBQVFOLEdBQUdILENBQUgsQ0FBUjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFLWCxPQUFRb0IsS0FBUixDQUFMLEVBQXVCOztBQUV0QlIsUUFBSUYsQ0FBSjs7QUFFQSxPQUFHOztBQUVGLE9BQUVFLENBQUY7O0FBRUEsU0FBS0EsTUFBTUosQ0FBWCxFQUFlO0FBQ2QsZUFBU2UsT0FBVDtBQUNBO0FBRUQsS0FSRCxRQVFVdkIsT0FBUU8sRUFBRUssQ0FBRixFQUFLRCxDQUFMLENBQVIsQ0FSVjs7QUFVQU4sU0FBTUUsQ0FBTixFQUFTRyxDQUFULEVBQVlFLENBQVo7O0FBRUFFLFNBQUtQLEVBQUVHLENBQUYsQ0FBTDtBQUNBVSxZQUFRTixHQUFHSCxDQUFILENBQVI7QUFFQTs7QUFFRCxRQUFNQyxJQUFJLENBQVYsRUFBY0EsSUFBSUYsQ0FBbEIsRUFBc0IsRUFBRUUsQ0FBeEIsRUFBNEI7O0FBRTNCRyxTQUFLUixFQUFFSyxDQUFGLENBQUw7O0FBRUFJLFFBQUlaLElBQUtXLEdBQUdKLENBQUgsQ0FBTCxFQUFZUyxLQUFaLENBQUo7O0FBRUFMLE9BQUdKLENBQUgsSUFBUVYsTUFBUjs7QUFFQSxTQUFNWSxJQUFJRixJQUFJLENBQWQsRUFBa0JFLEtBQUtKLENBQXZCLEVBQTJCLEVBQUVJLENBQTdCLEVBQWlDOztBQUVoQ0ksU0FBSWQsSUFBS2EsQ0FBTCxFQUFRRixHQUFHRCxDQUFILENBQVIsQ0FBSjs7QUFFQUUsUUFBR0YsQ0FBSCxJQUFRWCxLQUFNYSxHQUFHRixDQUFILENBQU4sRUFBYUksQ0FBYixDQUFSO0FBRUE7QUFFRDs7QUFFRCxRQUFNTCxJQUFJRixJQUFJLENBQWQsRUFBa0JFLElBQUlKLENBQXRCLEVBQTBCLEVBQUVJLENBQTVCLEVBQWdDOztBQUUvQkcsU0FBS1IsRUFBRUssQ0FBRixDQUFMOztBQUVBSSxRQUFJWixJQUFLVyxHQUFHSixDQUFILENBQUwsRUFBWVMsS0FBWixDQUFKOztBQUVBTCxPQUFHSixDQUFILElBQVFWLE1BQVI7O0FBRUEsU0FBTVksSUFBSUYsSUFBSSxDQUFkLEVBQWtCRSxLQUFLSixDQUF2QixFQUEyQixFQUFFSSxDQUE3QixFQUFpQzs7QUFFaENJLFNBQUlkLElBQUthLENBQUwsRUFBUUYsR0FBR0QsQ0FBSCxDQUFSLENBQUo7O0FBRUFFLFFBQUdGLENBQUgsSUFBUVgsS0FBTWEsR0FBR0YsQ0FBSCxDQUFOLEVBQWFJLENBQWIsQ0FBUjtBQUVBO0FBRUQ7O0FBRUQsS0FBRVAsQ0FBRjtBQUVBOztBQUVELFNBQU9BLENBQVA7QUFFQSxFQTdGRDs7QUErRkEsUUFBT0osV0FBUDtBQUVBIiwiZmlsZSI6ImdhdXNzam9yZGFuLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5leHBvcnQgZnVuY3Rpb24gX19nYXVzc2pvcmRhbl9fICggaXN6ZXJvLCB6ZXJvLCBpc3ViLCBtdWwsIGRpdiwgc3dhcCApIHtcblxuXG5cdC8qKlxuXHQgKiBBIGlzIGEgbSAqIChuICsgMSkgbWF0cml4LlxuXHQgKiBDb2x1bW4gbiBpcyB0aGUgaW5kZXBlbmRlbnQgdGVybSBjb2x1bW4uXG5cdCAqXG5cdCAqIEBwYXJhbSAge21hdHJpeH0gQSBlcXVhdGlvbnMgc3lzdGVtXG5cdCAqIEBwYXJhbSAge2NvbnN0IGxlbmd0aH0gbSBudW1iZXIgb2YgZXF1YXRpb25zXG5cdCAqIEBwYXJhbSAge2NvbnN0IGxlbmd0aH0gbiBudW1iZXIgb2YgdmFyaWFibGVzXG5cdCAqL1xuXHR2YXIgZ2F1c3Nqb3JkYW4gPSBmdW5jdGlvbiAoIEEsIG0sIG4gKSB7XG5cblx0XHR2YXIgciwgYywgaiwgaywgQXIsIEFqLCBmLCB0LCBpdGVyYXRpb25zLCByYW5rLCBwaXZvdDtcblxuXHRcdC8vIGZvciBlYWNoIHJvdyByXG5cdFx0Ly8gemVybyBjb2x1bW4gYyBmb3IgYWxsIG90aGVyIHJvd3Ncblx0XHQvLyB0aGUgcGl2b3QgdXNlZCBpcyBBW3JdW2NdXG5cblx0XHQvLyBJZiBhdCB0aGUgZW5kIG9mIHRoZSBwcm9jZWR1cmUgYSBsaW5lIGlzIGNvbXBvc2VkXG5cdFx0Ly8gb2YgemVyb2VzIGV4Y2VwdCBmb3IgdGhlIGluZGVwZW5kZW50IHRlcm1cblx0XHQvLyB0aGVuIHRoZSBzeXN0ZW0gaXMgbm90IHNvbHZhYmxlLiBUaGUgaW5kZXggb2Ygc3VjaFxuXHRcdC8vIGEgbGluZSBpcyBhdCBsZWFzdCB0aGUgcmFuayBvZiB0aGUgbWF0cml4XG5cblx0XHRpdGVyYXRpb25zID0gTWF0aC5taW4oIG0sIG4gKTtcblxuXHRcdHIgPSAwO1xuXG5cdFx0Y29sdW1ucyA6IGZvciAoIGMgPSAwIDsgYyA8IGl0ZXJhdGlvbnMgOyArK2MgKSB7XG5cblx0XHRcdEFyID0gQVtyXTtcblx0XHRcdHBpdm90ID0gQXJbY107XG5cblx0XHRcdC8vIGlmIHdlIGhhdmUgYSB6ZXJvIGluIEFbcl1bY11cblx0XHRcdC8vIHdlIG5lZWQgdG8gc3dhcCByb3cgciB3aXRoIHJvd1xuXHRcdFx0Ly8gaiBzdWNoIHRoYXQgQVtqXVtjXSBpcyBub3QgemVyb1xuXHRcdFx0Ly8gaWYgdGhpcyBpcyBub3QgcG9zc2libGUgdGhlbiB3ZVxuXHRcdFx0Ly8gZGVjcmVhc2UgdGhlIHJhbmsgb2YgdGhlIG1hdHJpeFxuXHRcdFx0Ly8gYW5kIGNvbnRpbnVlIHdpdGggdGhlIG5leHRcblx0XHRcdC8vIGNvbHVtblxuXG5cdFx0XHRpZiAoIGlzemVybyggcGl2b3QgKSApIHtcblxuXHRcdFx0XHRqID0gcjtcblxuXHRcdFx0XHRkbyB7XG5cblx0XHRcdFx0XHQrK2o7XG5cblx0XHRcdFx0XHRpZiAoIGogPT09IG0gKSB7XG5cdFx0XHRcdFx0XHRjb250aW51ZSBjb2x1bW5zO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IHdoaWxlICggaXN6ZXJvKCBBW2pdW2NdICkgKTtcblxuXHRcdFx0XHRzd2FwKCBBLCByLCBqICk7XG5cblx0XHRcdFx0QXIgPSBBW3JdO1xuXHRcdFx0XHRwaXZvdCA9IEFyW2NdO1xuXG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIGogPSAwIDsgaiA8IHIgOyArK2ogKSB7XG5cblx0XHRcdFx0QWogPSBBW2pdO1xuXG5cdFx0XHRcdGYgPSBkaXYoIEFqW2NdLCBwaXZvdCApO1xuXG5cdFx0XHRcdEFqW2NdID0gemVybygpO1xuXG5cdFx0XHRcdGZvciAoIGsgPSBjICsgMSA7IGsgPD0gbiA7ICsrayApIHtcblxuXHRcdFx0XHRcdHQgPSBtdWwoIGYsIEFyW2tdICk7XG5cblx0XHRcdFx0XHRBaltrXSA9IGlzdWIoIEFqW2tdLCB0ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIGogPSByICsgMSA7IGogPCBtIDsgKytqICkge1xuXG5cdFx0XHRcdEFqID0gQVtqXTtcblxuXHRcdFx0XHRmID0gZGl2KCBBaltjXSwgcGl2b3QgKTtcblxuXHRcdFx0XHRBaltjXSA9IHplcm8oKTtcblxuXHRcdFx0XHRmb3IgKCBrID0gYyArIDEgOyBrIDw9IG4gOyArK2sgKSB7XG5cblx0XHRcdFx0XHR0ID0gbXVsKCBmLCBBcltrXSApO1xuXG5cdFx0XHRcdFx0QWpba10gPSBpc3ViKCBBaltrXSwgdCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHQrK3I7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcjtcblxuXHR9O1xuXG5cdHJldHVybiBnYXVzc2pvcmRhbjtcblxufVxuIl19